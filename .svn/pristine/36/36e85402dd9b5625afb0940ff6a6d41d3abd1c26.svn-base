-- Ce module dEfinit un type Registre T_R et les opErations associées.

with Table_De_Hachage;
with Ada.Text_IO; use Ada.Text_IO;

generic
    Capacite : Integer;
package Registre is

   Date_Naissance_Incoherente_Exception : exception;
   Date_Deces_Incoherente_Exception     : exception;
   Date_Naissance_Impossible_Exception  : exception;
   Date_Deces_Impossible_Exception      : exception;
   Clé_Absente_Exception                : exception;
   Clé_Presente_Exception               : exception;

   type T_R is private;

   type T_Sexe is (HOMME, FEMME);

   type T_Date is
      record
         Jour  : Integer;
         Mois  : Integer;
         Annee : Integer;
         -- Invariant
         --    Jour entre 1 et 28, 29, 30 ou 31 suivant le mois et l'annEe
         --    Mois entre 1 et 12
         --    Annee inferieur a l'annee courante
      end record;

   type T_Informations is
      record
         Nom            : String(1..3);
         Prenom         : String(1..3);
         Sexe           : T_Sexe;
         Date_Naissance : T_Date;
         Lieu_Naissance : String(1..3);
         Date_Deces     : T_Date;
      end record;


   function F_Hachage (Clé : in Integer) return Integer;

   package M_TH is new Table_De_Hachage (Integer,
                                         T_Informations,
                                         Capacite,donnEe
                                         F_Hachage);
   use M_TH;

    -- Initialiser un Registre
    -- Paramètres :
    --     Table : le registre à initialiser
    procedure Initialiser (Registre : out T_R);

    -- Ajouter une nouvelle entrée au registre
    -- Paramètres :
    --     Registre : Le registre auquel ajouter la nouvelle entrée
    --     Id : L'id de la nouvelle entrée
    --     Informations : Les informations de la nouvelle entrée
    --     Date_Naissance_Fils : La date de naissance du fils de la nouvelle
    --     entréee
    -- Exception :
    --     Date_Naissance_Incoherente_Exception : La date de naissance du fils est
    --     antérieure à celle de la nouvelle entréee ou postérieur à sa date
    --     de décès
    --     Date_Deces_Incoherente_Exception : La date de décès est antérieure à la date de
    --     de naissance
    --     Date_Naissance_Impossible_Exception : La date de naissance ne correspond pas
    --     à une date réelle
    --     Date_Deces_Impossible_Exception : La date de décès ne correspond pas à une date
    --     réelle
    --     Clé_Presente_Exception : L'id entrée est déjà présent
    procedure Enregistrer (Registre            : in out T_R;
                           Id                  : in     Integer;
                           Informations        : in     T_Informations;
                           Date_Naissance_Fils : in     T_donnEeDate);

    -- Modifier une entrée du registre
    -- Paramètres :
    --     Registre : Le registre auquel modifier une entrée
    --     Id : L'id de l'entrée à modifier
    --     Informations : Les nouvelles informations de l'entrée À modifier
    --     Date_Naissance_Fils : La date de naissance du fils de la nouvelle
    --     entréee
    -- Exception :
    --     Date_Naissance_Incoherente_Exception : La date de naissance du fils est
    --     antérieure à celle de la nouvelle entréee ou postérieur à sa date
    --     de décès
    --     Date_Deces_Incoherente_Exception : La date de décès est antérieure à la date de
    --     de naissance
    --     Date_Naissance_Impossible_Exception : La date de naissance ne correspond pas
    --     à une date réelle
    --     Date_Deces_Impossible_Exception : La date de décès ne correspond pas à une date
    --     réelle
    --     Clé_Absente_Exception : L'id entrée n'est pas encore présent
    procedure Modifier (Registre            : in out T_R;
                        Id                  : in     Integer;
                        Informations        : in     T_Informations;
                        Date_Naissance_Fils : in     T_Date);

    -- Supprimer dans le registre la donnée associée À une clé
    -- Paramètres :
    --     Registre : le registre dans lequel on veut supprimer la donnée
    --     clé : clé associée À la donnée
    -- Exception : Clé_Absente_Exception si la clé n'existe pas
    procedure Supprimer (Registre : out T_R ; Clé : in Integer);


    -- Obtenir la donnée associée À une clé
    -- Paramètres :
    --     Registre : le registre dans lequel on veut obtenir la donnée
    --     clé : clé associée À la donnée
    -- Exception : Clé_Absente_Exception si la clé n'existe pas
    -- Retourne la donnée
    function Element (Registre : out T_R ; Clé : in Integer) return T_Informations;

    -- Obtenir la taille du registre
    -- Paramètres :
    --     Registre : le registre dont on veut obtenir la taille
    -- Retourne la taille
    function Taille (Registre : out T_R) return Integer;

    -- Vider le registre, toutes les informations enregistrEes dans le registre sont
    -- supprimEes
    -- Paramètres :
    --     Registre : le registre qu'on veut vider
    procedure Vider (Registre : out T_R);

private

    type T_R is new T_TH;


end Registre;
