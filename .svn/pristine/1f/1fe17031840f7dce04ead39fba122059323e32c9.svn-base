-- Ce module dÃ©finit un type arbre binaire T_AB et les opÃ©rations associÃ©es.

generic
   type T_Valeur is private;

package Arbre_Binaire is

   type T_Direction is (GAUCHE, DROITE, PREMIER);

   type T_AB is limited private;

   Noeud_Present_Exception : exception; -- Noeud déjà présent dans l'arbre
   Noeud_Absent_Exception : exception; -- Noeud absent de l'arbre
   Feuille_Non_Terminale_Exception : exception; -- Tentative de suppression
                                                -- d'une feuille non terminale


   -- Initialiser un arbre binaire
   -- ParamÃ¨tres :
   --     Arbre : l'arbre Ã  initialiser
   procedure Initialiser (Arbre : out T_AB);


   -- DÃ©truire l'arbre
   -- ParamÃ¨tres :
   --     Arbre : l'arbre Ã  dÃ©truire
   procedure Detruire (Arbre : in out T_AB);


   -- Ajouter une valeur dans l'arbre Ã  droite ou Ã  gauche d'un noeud valeur
   -- ParamÃ¨tres :
   --     Valeur : donnÃ©e Ã  ajouter
   --     Noeud : Pointeur vers le noeud de l'arbre oÃ¹ ajouter la valeur
   --     Direction : la direction dans laquelle ajouter la valeur
   -- Exception :
   --     Noeud_Present_Exception
   procedure Ajouter (Valeur : in T_Valeur ;
                      Arbre : in out T_AB ;
                      Direction : in T_Direction);


   -- Supprimer un noeud et tous ses fils dans l'arbre
   -- Supprime uniquement les feuilles terminales
   -- ParamÃ¨tres :
   --     Noeud : Pointeur vers le noeud que l'on veut supprimer
   -- Exception :
   --     Noeud_Absent_Exception
   --     Feuille_Non_Terminale_Exception
   procedure Supprimer (Arbre : in out T_AB);



   -- Afficher l'arbre en affichant chaque noeud avec la
   -- procÃ©dure Afficher_Noeud
   -- ParamÃ¨tres :
   --     Noeud : Pointeur vers le noeud Ã  partir duquel on veut afficher
   generic
      with procedure Afficher_Noeud (Noeud : in T_AB);
   procedure Afficher (Arbre : in T_AB);


   -- Obtenir le nombre d'Ã©lÃ©ments sous un noeud
   -- ParamÃ¨tres :
   --     Noeud : Pointeur vers le noeud choisi
   function Taille (Arbre : in T_AB) return Integer;

   -- Obtenir la valeur d'un noeud
   -- Paramètres :
   --      Noeud : Le noeud dont on veut connaitre la valeur
   -- Retourne :
   --      La valeur du noeud
   -- Exception :
   --      Noeud_Absent_Exception
   function Valeur (Arbre : in T_AB) return T_Valeur;

   -- Obtenir le nombre d'Ã©lÃ©ments sous un noeud Ã  un niveau donnÃ©
   -- ParamÃ¨tres :
   --     Noeud : Pointeur vers le noeud choisi
   function Taille_Niveau (Arbre : in T_AB ; Niveau : in Integer)
                           return Integer;

   -- Tester le module
   -- AB : Un arbre non initialisé à tester
   procedure Test (AB1 : in out T_AB;
                   Val_Test1 : in T_Valeur;
                   Val_Test2 : in T_Valeur;
                   Val_Test3 : in T_Valeur;
                   Val_Test4 : in T_Valeur;
                   Val_Test5 : in T_Valeur);


private

   type T_Noeud;
   type T_AB is access T_Noeud;
   type T_Noeud is
      record
         Valeur : T_Valeur;
         Sous_Arbre_Gauche : T_AB;
         Sous_Arbre_Droit : T_AB;
      end record;



end Arbre_Binaire;
