-- Implantation du module arbre_genealogique

with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;

-- TODO :Gérer les exceptions (les remonter) et les tester


package body Arbre_Genealogique is
    
    val_id : Integer := 0; -- Valeur actuelle de l'id à ajouter dans l'arbre

    procedure Initialiser (Arbre : out T_AG ; 
                           Informations : in M_R.T_Informations) is
    begin
        -- Initialiser l'arbre binaire et y ajouter la première personne
        M_AB.Initialiser (Arbre.AB);
        M_AB.Ajouter (Arbre.AB, val_id, PREMIER);
        -- Initialiser le registre et y ajouter les informations de la 
        -- première personne
        M_R.Initialiser (Arbre.Registre);
        M_R.Enregistrer (Arbre.Registre, val_id, Informations, 
                         Informations.Date_Naissance);
        -- Initialiser la table de hachage des noeuds et y ajouter le 
        -- premier noeud
        M_TH.Initialiser (Arbre.Noeuds);
        M_TH.Enregistrer (Arbre.Noeuds, val_id, Arbre.AB);
        -- Incrémenter la valeur de val_id
        val_id := val_id + 1;
    end Initialiser;


    procedure Detruire (Arbre : in out T_AG) is
    begin  
        -- Détruire l'arbre binaire
        M_AB.Detruire (Arbre.AB);
        -- Vider le registre
        M_R.Vider (Arbre.Registre);
        -- Vider la table des noeuds
        M_TH.Vider (Arbre.Noeuds);
    end Detruire;


    procedure Ajouter (Arbre : in out T_AG ;
                       id : in Integer ;
                       Parent : in T_Parent ;
                       Informations : in M_R.T_Informations) is
        Date_Naissance_Fils : T_Date;
        Noeud_Fils : T_AB;
        Noeud_Parent : T_AB;
    begin
        -- Ajouter au noeud fils un nouveau parent dans l'arbre
        Noeud_Fils := M_TH.Element(Arbre.Noeuds, id);
        if Parent = PERE then
            M_AB.Ajouter (Noeud_Fils, val_id, DROITE);
            Noeud_Parent := M_AB.Feuille (Noeud_Fils, DROITE);
        elsif Parent = MERE then
            M_AB.Ajouter (Noeud_Fils, val_id, GAUCHE);
            Noeud_Parent := M_AB.Feuille (Noeud_Fils, GAUCHE);
        end if;
        -- Enregistrer les informations du parent dans le registre
        Date_Naissance_Fils := M_R.Element(Arbre.Registre, id).Date_Naissance;
        M_R.Enregistrer (Arbre.Registre, val_id, Informations,
                         Date_Naissance_Fils);
        -- Enregistrer le noeud du parent ajouté dans la table des noeuds
        M_TH.Enregistrer (Arbre.Noeuds, val_id, Noeud_Parent);
        -- Incrémenter val_id
        val_id := val_id + 1;
    exception
        when M_R.Date_Fils_Incoherente_Exception 
            => raise Date_Fils_Incoherente_Exception;
    end Ajouter;


    procedure Modifier (Arbre : in out T_AG ;
                        id : in Integer ;
                        Informations : in M_R.T_Informations) is
        Noeud_A_Modifier : T_AB;
        Noeud_Fils : T_AB;
        id_A_Modifier : Integer;
        id_Fils : Integer;
        Date_Naissance_Fils : T_Date;
    begin
        Noeud_A_Modifier := M_TH.Element(Arbre.Noeuds, id);
        id_A_Modifier := M_AB.Valeur (Noeud_A_Modifier);
        if id_A_Modifier /= 1 then -- La personne à modifier n'est pas la 
                                   -- racine de l'arbre
            Noeud_Fils := M_AB.Racine(Noeud_A_Modifier);
            id_Fils := M_AB.Valeur (Noeud_Fils);
            Date_Naissance_Fils := M_R.Element(Arbre.Registre, id_Fils).Date_Naissance;
        else  -- La personne à modifier est la racine de l'arbre
            Date_Naissance_Fils := M_R.Element(Arbre.Registre, id).Date_Naissance;
        end if;
        -- Modifier les informations du registre
        M_R.Modifier (Arbre.Registre, id, Informations, Date_Naissance_Fils);
    end Modifier;

    
    procedure Supprimer_Informations (Arbre : in out T_AG; AB : in out T_AB) is
        id : Integer;
        Pere : T_AB;
        Mere : T_AB;
    begin
        -- Supprimer les informations de la personne et de ses ancêtres
        if M_AB.Taille(AB) /= 0 then
            id := M_AB.Valeur (AB);
            M_R.Supprimer (Arbre.Registre, id);
            M_TH.Supprimer (Arbre.Noeuds, id);
            Pere := M_AB.Feuille (AB, DROITE);
            Mere := M_AB.Feuille (AB, GAUCHE);
            Supprimer_Informations (Arbre, Pere);
            Supprimer_Informations (Arbre, Mere);
        else
            null;
        end if;
    end Supprimer_Informations;

    procedure Supprimer (Arbre : in out T_AG ; id : in Integer) is
        Noeud_A_Supprimer : T_AB;
    begin
        Noeud_A_Supprimer := M_TH.Element (Arbre.Noeuds, id);
        -- Supprimer les informations de la personne et de ses ancêtres
        Supprimer_Informations (Arbre, Noeud_A_Supprimer);
        -- Supprimer les noeuds dans l'arbre binaire
        M_AB.Supprimer (Noeud_A_Supprimer);
    end Supprimer;


    procedure Afficher (Arbre : in T_AG) is
        procedure Afficher_Informations (id : Integer) is
            Informations : T_Informations;
        begin
            Informations := M_R.Element (Arbre.Registre, id);
            Put (id, 1);
            Put ("  ");
            Put (Informations.Prenom);
            Put (" ");
            Put (Informations.Nom);
            
        end Afficher_Informations;
        procedure Afficher_Test is new M_AB.Afficher (Afficher_Informations);
    begin   
        Afficher_Test (Arbre.AB);
    end;


    procedure Afficher_Parents_Generation (Arbre : in T_AG ;
                                           id : in Integer ;
                                           gen : in Integer) is
    begin
        null;
    end Afficher_Parents_Generation;


    procedure Mono_Parent (Arbre : in T_AG) is
    begin
        null;
    end Mono_Parent;


    procedure Deux_Parents (Arbre : in T_AG) is
    begin
        null;
    end Deux_Parents;


    procedure Sans_Parent (Arbre : in T_AG) is
    begin
        null;
    end Sans_Parent;


    procedure Afficher_n_Generations (Arbre : in T_AG ; 
                                      id : in Integer ;
                                      gen : in Integer) is
    begin
        null;
    end Afficher_n_Generations;


    procedure Afficher_Homonymes (Arbre : in T_AG ; 
                                  id_n : in Integer ;
                                  id_m : in Integer) is
    begin
        null;
    end Afficher_Homonymes;
    
    
    function Taille (Arbre : in T_AG) return Integer is
        t : Integer;
    begin
        t := M_AB.Taille (Arbre.AB);
        -- Vérifier que la taille de l'arbre binaire est égale à celle du 
        -- registre
        pragma Assert (t = M_R.Taille (Arbre.Registre));
        -- Vérifier que la taille de l'arbre bianire est égale à celle de la
        -- table des noeuds
        pragma Assert (t = M_TH.Taille (Arbre.Noeuds));
        return t;
    end Taille;


end Arbre_Genealogique;
